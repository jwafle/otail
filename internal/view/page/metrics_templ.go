// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.924
package page

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/jwafle/otail/internal/view/layout"
	"github.com/jwafle/otail/internal/view/message"
)

func Metrics() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"container mx-auto p-4\"><div class=\"flex justify-between items-center mb-4\"><h1 class=\"text-2xl font-bold\">Metrics</h1><div class=\"badge badge-primary\">Live Updates</div></div><div class=\"mb-4\"><div class=\"stats shadow w-full\"><div class=\"stat\"><div class=\"stat-title\">CPU Usage</div><div class=\"stat-value\" id=\"cpu-usage\">--</div><div class=\"stat-desc\">Last minute average</div></div><div class=\"stat\"><div class=\"stat-title\">Memory</div><div class=\"stat-value\" id=\"memory-usage\">--</div><div class=\"stat-desc\">Available/Total</div></div><div class=\"stat\"><div class=\"stat-title\">Requests</div><div class=\"stat-value\" id=\"request-count\">--</div><div class=\"stat-desc\">Per minute</div></div></div></div><div class=\"card bg-base-100 shadow-xl mb-4\"><div class=\"card-body\"><h2 class=\"card-title\">Live Metrics</h2><p>Real-time telemetry data from your system</p><div id=\"metrics-container\" class=\"border rounded-lg bg-base-200 min-h-[300px] overflow-y-auto max-h-[500px]\" hx-sse=\"connect:/metrics/sse\"><div class=\"flex items-center justify-center h-[300px]\"><span class=\"loading loading-spinner loading-lg\"></span><p class=\"ml-2\">Waiting for metrics...</p></div><div hx-sse-swap=\"message\"></div></div></div></div></div><script>\n\t\t\tdocument.addEventListener('htmx:sseMessage', function(evt) {\n\t\t\t\ttry {\n\t\t\t\t\tconst jsonContent = evt.detail.text;\n\t\t\t\t\tconst metricsDiv = document.getElementById('metrics-container');\n\t\t\t\t\tconst jsonObj = JSON.parse(jsonContent.querySelector('pre').textContent);\n\n\t\t\t\t\t// Update summary stats if available\n\t\t\t\t\tif (jsonObj.name === 'cpu_usage') {\n\t\t\t\t\t\tdocument.getElementById('cpu-usage').textContent = jsonObj.value + '%';\n\t\t\t\t\t} else if (jsonObj.name === 'memory_usage') {\n\t\t\t\t\t\tdocument.getElementById('memory-usage').textContent = jsonObj.value + ' ' + jsonObj.unit;\n\t\t\t\t\t} else if (jsonObj.name === 'request_count') {\n\t\t\t\t\t\tdocument.getElementById('request-count').textContent = jsonObj.value;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('Error parsing metric data:', e);\n\t\t\t\t}\n\t\t\t});\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = layout.Base().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func MetricMessage(id string, json string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div hx-swap-oob=\"afterbegin:#metrics-container\" class=\"border-b border-base-300 hover:bg-base-300\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = message.Message(id, json).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
